name: Playwright_order Tests

# Определение события, запускающего workflow
on:
  workflow_dispatch:
  # pull_request:
  #   branches: [ main, master ]
  schedule:
    # - cron: '0 */12 * * *'
    # - cron: '0 */24 * * *'
    - cron: '0 5 * * *'    
    # - cron: '30 6 * * *'    
    - cron: '0 14 * * *'
    # - cron: '*/30 * * * *'

# Определение Задачи(job)
jobs:
  # Основная часть тестов
  test:
    timeout-minutes: 70

    # Уникальный ключ для группы задач предназначен для того, чтобы повторный запуск Джобы вставал в ожидание, не конфликтуая с первым
    concurrency: playwright-tests_new

    # запуск на виртуальной машине
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'schedule' && (github.event.schedule == '0 5 * * *' || github.event.schedule == '0 14 * * *'))
    runs-on: ubuntu-22.04
    env:
      USER_PASS: ${{ secrets.USER_PASS }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      TESTMAIL_JSON: ${{ secrets.TESTMAIL_JSON_ALT}}
      TESTMAIL_ADRESS: ${{ secrets.TESTMAIL_ADRESS_ALT}}
      TESTMAIL_JSON_EMPTY: ${{ secrets.TESTMAIL_JSON_EMPTY}}
      TESTMAIL_ADRESS_EMPTY: ${{ secrets.TESTMAIL_ADRESS_EMPTY}}
      AUTH_USERNAME: ${{ secrets.AUTH_USERNAME}}
      AUTH_PASSWORD: ${{ secrets.AUTH_PASSWORD}}
      JSON_SCHEMA: ${{ secrets.JSON_SCHEMA}}
      JSON_SCHEMA_TEST: ${{ secrets.JSON_SCHEMA_TEST}}
      METHOD: ${{ secrets.METHOD}}

    steps:

      # Клонирование репозитория
      - uses: actions/checkout@v4

      # Установка Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.1'

      # Установка зависимостей
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Установка браузеров
      - name: Ensure browsers are installed
        run: python -m playwright install --with-deps

      # Установка переменной окружения для connection_config.ini
      - name: Set up environment
        run: |
          sed -i 's/{TMS_TOKEN}/${{ secrets.TMS_TOKEN }}/g' connection_config.ini

      # Восстанавливаем кеш auth_state.json
      - name: Restore cached auth state
        uses: actions/cache@v3
        with:
          path: auth_states/auth_state.json
          key: auth-state-${{ github.run_id }}
          restore-keys: auth-state-

      # Запуск тестов
      - name: Run tests
        run: |
          echo "Running tests with verbosity and fail log"
          timeout 50m pytest tests/test_checkout.py \
            --reruns 2 --reruns-delay 3 \
            --alluredir=allure-results \
            -v --tb=short --capture=tee-sys --log-cli-level=DEBUG | tee pytest-output.log
            
      - name: Upload full pytest log
        uses: actions/upload-artifact@v4
        with:
          name: pytest-output
          path: pytest-output.log
        

     # Сохранение auth_state.json в кеш
      - name: Cache auth state
        uses: actions/cache@v3
        with:
          path: auth_states/auth_state.json
          key: auth-state-${{ github.run_id }}

      - name: Kill remaining processes
        if: always()
        run: |
          echo "Killing lingering processes"
          pkill -f playwright || true
          pkill -f chromium || true
          pkill -f firefox || true
          pkill -f node || true
          pkill -f pytest || true

      # Загрузка артефактов
      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results-main-${{ github.run_id }}
          path: allure-results/
          # retention_days: 10

  # Тест на создание заказа
  order-test:
    # needs: test  # order-test ждет окончания test если он запущен
    # запуск на виртуальной машине
    runs-on: ubuntu-22.04
    env:
      JSON_SCHEMA: ${{ secrets.JSON_SCHEMA }}
      JSON_SCHEMA_TEST: ${{ secrets.JSON_SCHEMA_TEST}}
      METHOD: ${{ secrets.METHOD}}
      JSON_SCHEMA_BASE64: ${{ secrets.JSON_SCHEMA_BASE64 }}

    # if: github.event_name == 'workflow_dispatch' || (github.event_name == 'schedule' && (github.event.schedule == '*/30 * * * *'))
    # if: github.event_name == 'workflow_dispatch' || (github.event_name == 'schedule' && github.event.schedule == '0 5 * * *')

    # Уникальный ключ для группы задач предназначен для того, чтобы повторный запуск Джобы вставал в ожидание, не конфликтуая с первым
    concurrency: playwright-tests_new

    steps:

      # Клонирование репозитория
      - uses: actions/checkout@v4

      # Установка Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.1'

      # Установка зависимостей
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Установка браузеров
      - name: Ensure browsers are installed
        run: python -m playwright install --with-deps

      # Установка переменной окружения для connection_config.ini
      - name: Set up environment
        run: |
          sed -i 's/{TMS_TOKEN}/${{ secrets.TMS_TOKEN }}/g' connection_config.ini

      # Восстанавливаем кеш auth_state.json
      - name: Restore cached auth state
        uses: actions/cache@v3
        with:
          path: auth_states/auth_state.json
          key: auth-state-${{ github.run_id }}
          restore-keys: auth-state-
          
      # Задержка перед опросом статуса выполнения test
      - name: Wait before checking test job
        run: sleep 30
          
      # # Опрашиваем статус выполнения test
      # - name: Wait for test job to complete
      #   run: |
      #     echo "Checking status of test job..."
      #     while true; do
      #       # Получаем статус задачи test через GitHub API
      #       STATUS=$(curl -s -H "Authorization: ***" \
      #         -H "Accept: application/vnd.github.v3+json" \
      #         "https://api.github.com/repos/garagetools-garwin/playwright_tests_UI/actions/runs/${{ github.run_id }}/jobs" \
      #         | jq -r '.jobs[] | select(.name == "test") | .status')
          
      #       if [[ "$STATUS" == "completed" ]]; then
      #         echo "Test job is completed."
      #         break
      #       elif [[ "$STATUS" == "in_progress" || "$STATUS" == "queued" || "$STATUS" == "pending" ]]; then
      #         echo "Test job is still running, queued, or pending. Waiting..."
      #         sleep 60
      #       else
      #         echo "Test job status is unknown: $STATUS"
      #         exit 1
      #       fi
      #     done

      # Запуск тестов
      - name: Run only test_create_order
        run: pytest --reruns 2 --reruns-delay 3 -m "custom_schedule" --alluredir=allure-results

      # Загрузка артефактов
      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results-order-${{ github.run_id }}
          path: allure-results/
          # retention_days: 10

  # Обьединение отчетов по всем тестам
  merge-reports:
    needs: [test, order-test]
    if: always()  # Запуск даже если одна из джоб была пропущена
    runs-on: ubuntu-22.04
    steps:
      - name: Download Allure Results
        uses: actions/download-artifact@v4
        with:
          pattern: allure-results-*
          path: allure-results
          merge-multiple: true

      # Получение истории прогонов Allure
      - name: Get Allure history
        uses: actions/checkout@v2
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      # Генерация отчета с учетом истории прогонов
      - name: Generate Allure report
        uses: simple-elf/allure-report-action@master
        if: always()
        id: allure-report
        with:
          allure_results: allure-results
          gh_pages: gh-pages
          allure_report: allure-report
          allure_history: allure-history

      # Загрузка артефактов
      - name: Upload Allure Report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report

      # Публикация отчета Allure  
      - name: Publish Allure report
        uses: peaceiris/actions-gh-pages@v2
        if: always()
        env:
          PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_BRANCH: gh-pages
          PUBLISH_DIR: allure-history

      # Публикация результата прогона в testIT
      # - name: Submit results testIT
      #   if: always()
      #   run: |
      #     pip install testit-cli
      #     #export TMS_TOKEN=${{ secrets.TMS_TOKEN }}
      #     testit results import \
      #       --url https://team-wuas.testit.software/ \
      #       --token ${{ secrets.TMS_TOKEN }} \
      #       --project-id 87c7eb78-be36-4e13-9e36-651ca3d5f060 \
      #       --configuration-id 36238c9d-da5e-4cca-a8c4-f0d8316d3f6b \
      #       --testrun-name "GitHubtestrun" \
      #       --results results/test-results.xml
