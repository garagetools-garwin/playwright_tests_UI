"""–î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
import time

import allure
import pytest
import pyodbc
import os
import re

from page_objects.cart_page import CartPage
from page_objects.autorization_modal_element import AutorizationModalElement
from page_objects.checkout_page import CheckoutPage
from page_objects.purchase_page import PurchasePage
from jsonschema import validate, ValidationError


@pytest.mark.auth
@pytest.mark.smoke
@pytest.mark.custom_schedule
def test_create_order(page_fixture, base_url, delete_recipient_fixture, delete_address_fixture):
    cart_page = CartPage(page_fixture)
    checkout_page = CheckoutPage(page_fixture)
    purchase_page = PurchasePage(page_fixture)
    cart_page.open(base_url)
    cart_page.clear_cart()
    cart_page.add_to_cart_cheap_product(base_url)
    checkout_page.buyer_and_recipient_block.create_recipient(base_url, page_fixture)
    checkout_page.obtaining_block.create_address(base_url, page_fixture)
    delete_recipient_fixture()
    delete_address_fixture()
    checkout_page.payment_block.click_contact_a_manager_button()
    checkout_page.commentary_block.click_commentary_togle_button()
    checkout_page.commentary_block.fill_commentary_textarea("!!! TEST !!!")
    checkout_page.calculation_block.click_order_button()
    time.sleep(3)
    order_number = purchase_page.memorize_the_order_number()
    print(order_number)
    with allure.step("–ü—Ä–æ–≤–µ—Ä—è—é, —á—Ç–æ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–µ –ø—É—Å—Ç–æ–π"):
        assert order_number != "", "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –ø—É—Å—Ç–æ–π!"
    with allure.step("–ü—Ä–æ–≤–µ—Ä—è—é, —á—Ç–æ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–Ω–æ–º—É –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤ –•-000000000, –•X000000000, 000000000."):
        pattern = r'^[–ê-–Ø–∞-—è-]*\d{9}[–ê-–Ø–∞-—è-]*$'

        assert re.match(pattern, order_number), f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ '{order_number}' –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à–∞–±–ª–æ–Ω—É –•-000000000!"


@pytest.mark.auth
@pytest.mark.smoke
@pytest.mark.custom_schedule
def create_order_schema(page_fixture, base_url, delete_recipient_fixture, delete_address_fixture):
    cart_page = CartPage(page_fixture)
    checkout_page = CheckoutPage(page_fixture)
    purchase_page = PurchasePage(page_fixture)

    cart_page.open(base_url)
    cart_page.clear_cart()
    cart_page.add_to_cart_cheap_product(base_url)
    checkout_page.buyer_and_recipient_block.create_recipient(base_url, page_fixture)
    checkout_page.obtaining_block.create_address(base_url, page_fixture)
    delete_recipient_fixture()
    delete_address_fixture()
    checkout_page.payment_block.click_contact_a_manager_button()
    checkout_page.commentary_block.click_commentary_togle_button()
    checkout_page.commentary_block.fill_commentary_textarea("!!! TEST !!!")

    def handle_request(route, request):
        if "!" in request.url:
            body = request.post_data_json()
            assert body.get("comment") == "!!! TEST !!!", "–û—à–∏–±–∫–∞: comment –Ω–µ —Ä–∞–≤–µ–Ω '!!! TEST !!!'"
            route.continue_()

    def handle_response(response):
        if "!" in response.url:
            body = response.json()
            print("–ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:", body)  # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç
            validate_response_schema_and_values(body)

    page_fixture.on("response", handle_response)

    def validate_response_schema_and_values(body):
        try:
            print("–ü—Ä–æ–≤–µ—Ä—è—é JSON:", body)  # üîπ –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π JSON
            print("–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —Å—Ö–µ–º–∞:", response_schema)  # üîπ –õ–æ–≥–∏—Ä—É–µ–º —Å—Ö–µ–º—É
            validate(instance=body, schema=response_schema)
            assert body["seller"]["title"] == "TestTest", "–û—à–∏–±–∫–∞: seller.title –Ω–µ 'TestTest'"
        except ValidationError as e:
            raise AssertionError(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ö–µ–º—ã: {e.message}")




    with allure.step("–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã"):
        page_fixture.on("route", lambda route, request: handle_request(route, request))
        page_fixture.on("response", lambda response: handle_response(response))

    checkout_page.calculation_block.click_order_button()
    time.sleep(3)
    order_number = purchase_page.memorize_the_order_number()
    print(order_number)

    with allure.step("–ü—Ä–æ–≤–µ—Ä—è—é, —á—Ç–æ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–µ –ø—É—Å—Ç–æ–π"):
        assert order_number != "", "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –ø—É—Å—Ç–æ–π!"

    with allure.step("–ü—Ä–æ–≤–µ—Ä—è—é, —á—Ç–æ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–Ω–æ–º—É –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤ –•-000000000, –•X000000000, 000000000."):
        pattern = r'^[–ê-–Ø–∞-—è-]*\d{9}[–ê-–Ø–∞-—è-]*$'
        assert re.match(pattern, order_number), f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ '{order_number}' –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à–∞–±–ª–æ–Ω—É!"

    # TODO: –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å (—Ç–æ –µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —Å–µ–π—á–∞—Å —Ç—É—Ç –æ—Ç–≤–µ—Ç)
    # TODO: –í –æ—Ç–≤–µ—Ç–µ –∫–∞–∫ –∏ –≤ –∑–≤–ø—Ä–æ—Å–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–¥–µ–ª–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (required)
    # def validate_json_schema(body):
    #     # –ü—Ä–∏–º–µ—Ä –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON-—Å—Ö–µ–º—ã
    #
    #     schema = {
    #         "type": "object",
    #         "properties": {
    #             "id": {"type": "string"},
    #             "seller": {
    #                 "title": {"type": "string"}
    #             }
    #         },
    #     }
    #     validate(instance=body, schema=schema)
    #
    # assert page_fixture.body.json().post("comment") == "!!!TEST!!!"

# db_server = os.getenv('DB_SERVER')
# db_name = os.getenv('DB_NAME')
# db_user = os.getenv('DB_USER')
# db_password = os.getenv('DB_PASSWORD')

# –ê—Ä—Ö–∏–≤–Ω—ã–π —Ç–µ—Å—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ SQL
# @pytest.mark.skip("–í—Ä–µ–º–µ–Ω–Ω–æ, –ø–æ–∫–∞ –Ω–µ –Ω–∞—É—á–∏–º—Å—è —É–¥–∞–ª—è—Ç—å –∑–∞–∫–∞–∑—ã –∏–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –≤ 1–°")
# @pytest.mark.smoke
# def create_order(page_fixture, base_url):
#     cart_page = CartPage(page_fixture)
#     autorization = AutorizationModalElement(page_fixture)
#     cart_page.add_to_cart(base_url)
#     cart_page.open(base_url)
#     cart_page.click_order_button()
#     autorization.cart_autorization_send_code_mail_ru()
#     code = autorization.get_autorization_code_mail_ru()
#     autorization.complete_autorization(code)
#     cart_page.click_order_button()
#     #–∑–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø–æ–ª—è, –≤—ã–±–∏—Ä–∞–µ–º —É—Ç–æ—á–Ω–∏—Ç—å —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–æ–≤–æ "test"
#     time.sleep(2)
#     page_fixture.locator('input[type="text"].kit-input.Field__Input').nth(0).fill("test")
#     page_fixture.locator('input[type="tel"].kit-input.Field__Input').nth(0).fill("+7 (999) 999-99-99")
#     page_fixture.get_by_text("–£—Ç–æ—á–Ω–∏—Ç—å —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞").nth(0).click()
#     page_fixture.locator(".CheckoutSection__Toggle.Button").click()
#     page_fixture.locator('.kit-textarea.Field__Textarea').fill("!!! TEST !!!")
#     # –Ω–∞–∂–∏–º–∞–µ–º –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
#     page_fixture.locator(".OrderTotal__Button").click()
#     # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ .PurchaseWithoutPayment__Number –∏–∑–≤–ª–µ—á—å –Ω—É–∂–Ω–æ —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞, –ø–æ—Å–ª–µ "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: "
#     order_number = page_fixture.locator("p.OrderSummary__Number").inner_text().split("–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ")[1]
#     print(order_number)
#
#     time.sleep(360)
#
#
#     connection = pyodbc.connect(
#         'DRIVER={ODBC Driver 17 for SQL Server};'
#         f'SERVER={db_server};'
#         f'DATABASE={db_name};'
#         f'UID={db_user};'
#         f'PWD={db_password}'
#     )
#
#     try:
#         with connection.cursor() as cursor:
#             sql = "SELECT * FROM Buyer_Requests WHERE number = ?"
#             cursor.execute(sql, (order_number,))
#             result = cursor.fetchone()
#
#             assert result is not None, "Order not found in database"
#             print(f"Order {order_number} found in database: {result}")
#     finally:
#         connection.close()
#
#     page_fixture.close()
